(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["2d0d72ee"],{7670:function(s,a,t){"use strict";t.r(a);var i=function(){var s=this,a=s.$createElement;s._self._c;return s._m(0)},e=[function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("div",[t("div",{staticClass:"post"},[t("h4",{staticClass:"postTitle"},[s._v("\n     javascript中的12种循环遍历方法1\n    ")]),t("div",{staticClass:"clear"}),t("div",{staticClass:"postBody"},[t("div",{staticClass:"blogpost-body ",attrs:{id:"cnblogs_post_body"}},[t("p",[s._v("1：for循环")]),t("p",[s._v("let arr = [1,2,3];")]),t("p",[s._v("for(let i =0;i<arr.length;i++){")]),t("p",[s._v("console.log(i,arr[i])")]),t("p",[s._v("}")]),t("p",[s._v("//for循环是js中最常用的一个循环工具，经常用来数组的循环遍历，")]),t("p",[s._v("2：for in循环")]),t("p",[s._v("let obj = {name: 'xiao' ,age:'24'}")]),t("p",[s._v("for(let i in obj){")]),t("p",[s._v("console.log(i,obj[i]);")]),t("p",[s._v("}")]),t("p",[s._v("\n          //for in 循环主要用于遍历普通对象，i 代表对象的 key 值，obj[i]\n          代表对应的\n          value,当用它来遍历数组时候，多数情况下也能达到同样的效果，但是你不要这么做，这是有风险的，因为\n          i\n          输出为字符串形式，而不是数组需要的数字下标，这意味着在某些情况下，会发生字符串运算，导致数据错误，比如：'52'+1\n          = '521' 而不是我们需要的 53。另外 for in\n          循环的时候，不仅遍历自身的属性，还会找到 prototype\n          上去，所以最好在循环体内加一个判断，就用\n          obj[i].hasOwnProperty(i)，这样就避免遍历出太多不需要的属性。\n        ")]),t("p",[s._v("3：while循环")]),t("div",{staticClass:"line number1 index0 alt2"},[t("code",{staticClass:"js plain"},[s._v("let cars=[")]),t("code",{staticClass:"js string"},[s._v('"BMW"')]),t("code",{staticClass:"js plain"},[s._v(",")]),t("code",{staticClass:"js string"},[s._v('"Volvo"')]),t("code",{staticClass:"js plain"},[s._v(",")]),t("code",{staticClass:"js string"},[s._v('"Saab"')]),t("code",{staticClass:"js plain"},[s._v(",")]),t("code",{staticClass:"js string"},[s._v('"Ford"')]),t("code",{staticClass:"js plain"},[s._v("];")])]),t("div",{staticClass:"line number2 index1 alt1"},[t("span",{staticStyle:{"font-family":"monospace"}},[s._v("let")]),s._v(" "),t("code",{staticClass:"js plain"},[s._v("i=0;")])]),t("div",{staticClass:"line number3 index2 alt2"},[t("code",{staticClass:"js keyword"},[s._v("while")]),t("code",{staticClass:"js plain"},[s._v("(cars[i])")])]),t("div",{staticClass:"line number4 index3 alt1"},[t("code",{staticClass:"js plain"},[s._v("{")])]),t("div",{staticClass:"line number5 index4 alt2"},[t("code",{staticClass:"js plain"},[s._v("console.log(cars[i] + ")]),t("code",{staticClass:"js string"},[s._v('"<br>"')]),t("code",{staticClass:"js plain"},[s._v(")")])]),t("div",{staticClass:"line number6 index5 alt1"},[t("code",{staticClass:"js plain"},[s._v("i++;")])]),t("div",{staticClass:"line number7 index6 alt2"},[t("code",{staticClass:"js plain"},[s._v("};")])]),t("div",{staticClass:"line number7 index6 alt2"},[s._v("4：do while循环")]),t("div",{staticClass:"line number7 index6 alt2"},[t("div",{staticClass:"line number1 index0 alt2"},[t("code",{staticClass:"js plain"},[s._v("let i = 3;")])]),t("div",{staticClass:"line number2 index1 alt1"},[t("code",{staticClass:"js keyword"},[s._v("do")]),t("code",{staticClass:"js plain"},[s._v("{")])]),t("div",{staticClass:"line number3 index2 alt2"},[t("code",{staticClass:"js spaces"},[s._v(" ")]),t("code",{staticClass:"js plain"},[s._v("console.log(i)")])]),t("div",{staticClass:"line number4 index3 alt1"},[t("code",{staticClass:"js spaces"},[s._v(" ")]),t("code",{staticClass:"js plain"},[s._v("i--;")])]),t("div",{staticClass:"line number5 index4 alt2"},[t("code",{staticClass:"js plain"},[s._v("}")])]),t("div",{staticClass:"line number6 index5 alt1"},[t("code",{staticClass:"js keyword"},[s._v("while")]),t("code",{staticClass:"js plain"},[s._v("(i>0)")])]),t("div",{staticClass:"line number6 index5 alt1"},[s._v("\n            //do while 循环是 while\n            循环的一个变体，它首先执行一次操作，然后才进行条件判断，是 true\n            的话再继续执行操作，是 false 的话循环结束。\n          ")]),t("div",{staticClass:"line number6 index5 alt1"},[s._v("5：Array forEach循环")]),t("div",{staticClass:"line number6 index5 alt1"},[t("div",{staticClass:"line number1 index0 alt2"},[t("code",{staticClass:"js plain"},[s._v("let arr = [1,2,3];")])]),t("div",{staticClass:"line number2 index1 alt1"},[t("code",{staticClass:"js plain"},[s._v("arr.forEach(")]),t("code",{staticClass:"js keyword"},[s._v("function")]),t("code",{staticClass:"js plain"},[s._v("(i,index){")])]),t("div",{staticClass:"line number3 index2 alt2"},[t("code",{staticClass:"js spaces"},[s._v(" ")]),t("code",{staticClass:"js plain"},[s._v("console.log(i,index)")])]),t("div",{staticClass:"line number4 index3 alt1"},[t("code",{staticClass:"js plain"},[s._v("})")])]),t("div",{staticClass:"line number4 index3 alt1"},[s._v("\n              //forEach循环，循环数组中每一个元素并采取操作， 没有返回值，\n              可以不用知道数组长度,他有三个参数，只有第一个是必需的，代表当前下标下的\n              value。\n              "),t("p",[s._v("\n                另外请注意，forEach\n                循环在所有元素调用完毕之前是不能停止的，它没有 break\n                语句，如果你必须要停止，可以尝试 try catch\n                语句，就是在要强制退出的时候，抛出一个 error 给 catch\n                捕捉到，然后在 catch 里面\n                return，这样就能中止循环了，如果你经常用这个方法，最好自定义一个这样的\n                forEach 函数在你的库里。\n              ")]),t("p",[s._v("6：Array map（)方法")]),t("p",[s._v("let  arr = [1,2,3];")]),t("p",[s._v("let tt = arr.map(function(i){")]),t("p",[s._v("console.log(i);")]),t("p",[s._v("return i*2;")]),t("p",[s._v("})")]),t("p",[s._v("\n                //map()\n                方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。"),t("br"),s._v("注意：map\n                和 forEach 方法都是只能用来遍历数组，不能用来遍历普通对象。\n              ")]),t("p",[s._v("7:Array filter()方法")]),t("p",[s._v("let arr = [1,2,3];")]),t("p",[s._v("let tt= arr.filter(function(i){")]),t("p",[s._v("return i > 1;")]),t("p",[s._v("})")]),t("p",[s._v("\n                //filter 方法是 Array\n                对象内置方法，它会返回通过过滤的元素，不改变原来的数组。\n              ")]),t("p",[s._v("8:Array some()方法")]),t("p",[s._v("let arr =[1,2,3];")]),t("p",[s._v("let tt = arr.some(function(i){")]),t("p",[s._v("return i > 1;")]),t("p",[s._v("})")]),t("p",[s._v("\n                //some()\n                方法用于检测数组中的元素是否满足指定条件（函数提供）,返回\n                boolean 值，不改变原数组。\n              ")]),t("p",[s._v("9:Array every()方法")]),t("p",[s._v("let arr = [1,2,3];")]),t("p",[s._v("let tt = arr.some(function(i){")]),t("p",[s._v("return i > 1;")]),t("p",[s._v("})")]),t("p",[s._v("\n                //every()\n                方法用于检测数组所有元素是否都符合指定条件（通过函数提供），返回\n                boolean 值，不改变原数组。\n              ")]),t("p",[s._v("10:Array reduce()方法")]),t("p",[s._v("let arr = [1,2,3];")]),t("p",[s._v("let ad = arr.reduce(function(i,j){")]),t("p",[s._v("return i + j;")]),t("p",[s._v("})")]),t("p",[s._v("\n                //reduce()\n                方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。\n              ")]),t("p",[s._v("11:Array reduceRight()方法")]),t("p",[s._v("let arr = [1,2,3];")]),t("p",[s._v("let ad = arr.reduceRight(function(i,j){")]),t("p",[s._v("return i + j;")]),t("p",[s._v("})")]),t("p",[s._v("\n                //reduceRight()方法,和 reduce()\n                功能是一样的，它是从数组的末尾处向前开始计算。\n              ")]),t("p",[s._v("12:for of 循环")]),t("p",[s._v("let arr = ['name','age'];")]),t("p",[s._v("for(let i of arr){")]),t("p",[s._v("console.log(i);")]),t("p",[s._v("}")]),t("p",[s._v("\n                //for of 循环是 Es6 中新增的语句，用来替代 for in 和\n                forEach，它允许你遍历 Arrays（数组）, Strings（字符串）,\n                Maps（映射）, Sets（集合）等可迭代(Iterable\n                data)的数据结构,注意它的兼容性。\n              ")])])])])])])])])}],n={},l=n,r=t("2877"),c=Object(r["a"])(l,i,e,!1,null,"21e470b1",null);a["default"]=c.exports}}]);